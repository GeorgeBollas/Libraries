// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noter.Persistance;

namespace Noter.Persistance.Migrations
{
    [DbContext(typeof(NoterDbContext))]
    [Migration("20190207043000_AddedIsQuickPickToLibrary1")]
    partial class AddedIsQuickPickToLibrary1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Noter.Domain.Entities.CommandLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Command")
                        .IsRequired();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Request")
                        .IsRequired();

                    b.Property<string>("Response")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CommandLogs");
                });

            modelBuilder.Entity("Noter.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LibraryId");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Noter.Domain.Entities.ItemTag", b =>
                {
                    b.Property<int>("ItemId");

                    b.Property<int>("TagId");

                    b.HasKey("ItemId", "TagId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("TagId");

                    b.ToTable("ItemTags");
                });

            modelBuilder.Entity("Noter.Domain.Entities.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsQuickpick");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Notes");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Noter.Domain.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Noter.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsQuickPick");

                    b.Property<int>("LibraryId");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Notes");

                    b.Property<int>("Sequence");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Noter.Domain.Entities.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("Noter.Domain.Entities.WorkspaceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemId");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<int>("Sequence");

                    b.Property<int>("WorkspaceId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceItems");
                });

            modelBuilder.Entity("Noter.Domain.Entities.Item", b =>
                {
                    b.HasOne("Noter.Domain.Entities.Library", "Library")
                        .WithMany("Documents")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Noter.Domain.ValueObjects.ItemType", "Type", b1 =>
                        {
                            b1.Property<int>("ItemId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("BaseType")
                                .IsRequired()
                                .HasMaxLength(7);

                            b1.Property<string>("Version")
                                .IsRequired()
                                .HasMaxLength(3);

                            b1.HasKey("ItemId");

                            b1.ToTable("Items");

                            b1.HasOne("Noter.Domain.Entities.Item")
                                .WithOne("Type")
                                .HasForeignKey("Noter.Domain.ValueObjects.ItemType", "ItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Noter.Domain.Entities.ItemTag", b =>
                {
                    b.HasOne("Noter.Domain.Entities.Item", "Item")
                        .WithMany("ItemTags")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Noter.Domain.Entities.Tag", "Tag")
                        .WithMany("ItemTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Noter.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Noter.Domain.Entities.Library", "Library")
                        .WithMany("Tags")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Noter.Domain.Entities.WorkspaceItem", b =>
                {
                    b.HasOne("Noter.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Noter.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Items")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
